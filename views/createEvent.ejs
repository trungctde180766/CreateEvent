<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Event - Event Management System</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
        <div class="header-content">
            <a href="/dashboard" class="logo">
                <i class="fas fa-calendar-alt"></i>
                Event Management System
            </a>
            <nav>
                <ul class="nav-menu">
                    <li><a href="/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                    <li data-role="admin"><a href="/create-event"><i class="fas fa-plus-circle"></i> Create Event</a></li>
                    <li data-role="admin"><a href="/list-registrations"><i class="fas fa-users"></i> View All Registrations</a></li>
                    <li data-role="admin"><a href="/search-registrations"><i class="fas fa-search"></i> Search Registrations</a></li>
                    <li data-role="student"><a href="/register-event"><i class="fas fa-calendar-plus"></i> Register for Events</a></li>
                    <li data-role="student"><a href="/cancel-registration"><i class="fas fa-list-alt"></i> My Registrations</a></li>
                    <li><a href="#" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <div class="container">
        <div class="card">
            <h1><i class="fas fa-plus-circle text-primary"></i> Create New Event</h1>
            <p class="text-muted">Add a new event to the system for students to register.</p>
        </div>

        <div id="alertContainer"></div>

        <!-- Create Event Form -->
        <div class="card">
            <h2><i class="fas fa-edit text-primary"></i> Event Details</h2>
            <form id="createEventForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="eventName">
                            <i class="fas fa-calendar-day"></i> Event Name
                        </label>
                        <input type="text" id="eventName" name="name" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="maxCapacity">
                            <i class="fas fa-users"></i> Maximum Capacity
                        </label>
                        <input type="number" id="maxCapacity" name="maxCapacity" class="form-control" min="1" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="eventDate">
                            <i class="fas fa-calendar"></i> Event Start Date & Time
                        </label>
                        <input type="datetime-local" id="eventDate" name="date" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="eventEndDate">
                            <i class="fas fa-calendar-check"></i> Event End Date & Time
                        </label>
                        <input type="datetime-local" id="eventEndDate" name="endDate" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="eventLocation">
                            <i class="fas fa-map-marker-alt"></i> Location
                        </label>
                        <input type="text" id="eventLocation" name="location" class="form-control" required>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="eventDescription">
                        <i class="fas fa-info-circle"></i> Description
                    </label>
                    <textarea id="eventDescription" name="description" class="form-control" rows="4" placeholder="Enter event description..." required></textarea>
                </div>
                
                <div class="form-actions">
                    <button type="submit" id="createEventBtn" class="btn btn-primary">
                        <i class="fas fa-plus-circle"></i> Create Event
                    </button>
                    <a href="/dashboard" class="btn btn-secondary">
                        <i class="fas fa-times"></i> Cancel
                    </a>
                </div>
            </form>
        </div>

        <!-- Recent Events -->
        <div class="card">
            <h2><i class="fas fa-history text-primary"></i> Recent Events</h2>
            <div id="recentEventsContainer">
                <p class="text-center">Loading recent events...</p>
            </div>
        </div>
    </div>

    <script src="/js/app.js"></script>
    <script>
        // Create event form handling
        document.getElementById('createEventForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const eventData = {
                name: formData.get('name'),
                maxCapacity: parseInt(formData.get('maxCapacity')),
                date: formData.get('date'),
                endDate: formData.get('endDate'),
                location: formData.get('location'),
                description: formData.get('description')
            };
            
            // Validate on frontend
            if (!eventData.name || !eventData.date || !eventData.endDate || !eventData.location) {
                showAlert('Please fill in all required fields.', 'danger');
                return;
            }
            if (new Date(eventData.endDate) <= new Date(eventData.date)) {
                showAlert('End date must be after start date.', 'danger');
                return;
            }
            try {
                showLoading('createEventBtn');
                
                const token = localStorage.getItem('token');
                const response = await fetch('/api/events', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(eventData)
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showAlert('Event created successfully!', 'success');
                    this.reset();
                    loadRecentEvents();
                } else {
                    showAlert(data.message || 'Failed to create event', 'danger');
                }
            } catch (error) {
                showAlert('An error occurred while creating the event', 'danger');
                console.error('Create event error:', error);
            } finally {
                hideLoading('createEventBtn');
            }
        });

        // Load recent events
        async function loadRecentEvents() {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch('/api/events', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    const events = await response.json();
                    displayRecentEvents(events.slice(0, 5)); // Show only 5 most recent
                }
            } catch (error) {
                console.error('Error loading recent events:', error);
            }
        }

        // Display recent events
        function displayRecentEvents(events) {
            const container = document.getElementById('recentEventsContainer');
            if (!container) return;
            
            if (events.length === 0) {
                container.innerHTML = '<p class="text-center text-muted">No events created yet.</p>';
                return;
            }
            
            const eventsHTML = events.map(event => `
                <div class="recent-event-item">
                    <div class="event-info">
                        <h4><i class="fas fa-calendar-day"></i> ${event.name}</h4>
                        <p><i class="fas fa-calendar"></i> ${new Date(event.date).toLocaleString()} <b>â†’</b> ${event.endDate ? new Date(event.endDate).toLocaleString() : ''}</p>
                        <p><i class="fas fa-map-marker-alt"></i> ${event.location}</p>
                        <p><i class="fas fa-users"></i> Capacity: ${event.maxCapacity}</p>
                    </div>
                    <div class="event-actions">
                        <button class="btn btn-sm btn-primary" onclick="editEvent('${event._id}')">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteEvent('${event._id}')">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = eventsHTML;
        }

        // Edit event function
        function editEvent(eventId) {
            // Redirect to edit page or show modal
            showAlert('Edit functionality coming soon!', 'info');
        }

        // Delete event function
        async function deleteEvent(eventId) {
            if (!confirm('Are you sure you want to delete this event?')) {
                return;
            }
            
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`/api/events/${eventId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    showAlert('Event deleted successfully!', 'success');
                    loadRecentEvents();
                } else {
                    const data = await response.json();
                    showAlert(data.message || 'Failed to delete event', 'danger');
                }
            } catch (error) {
                showAlert('An error occurred while deleting the event', 'danger');
                console.error('Delete event error:', error);
            }
        }

        // Load recent events on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadRecentEvents();
        });
    </script>
</body>
</html> 